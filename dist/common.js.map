{"version":3,"file":"common.js","mappings":"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","sources":["webpack://workspace/./src/core/normalize.ts","webpack://workspace/./src/core/storage.ts","webpack://workspace/./src/core/logger.ts"],"sourcesContent":["import { Vehicle, RawVehicleData } from '../types';\n\n/**\n * Normalize and clean up scraped vehicle data\n */\nexport function normalizeVehicleData(vehicle: RawVehicleData): Vehicle {\n  const normalized: any = { ...vehicle };\n  \n  // Normalize make\n  if (normalized.make) {\n    normalized.make = titleCase(normalized.make.trim());\n  }\n  \n  // Normalize model\n  if (normalized.model) {\n    normalized.model = titleCase(normalized.model.trim());\n  }\n  \n  // Normalize trim\n  if (normalized.trim) {\n    normalized.trim = titleCase(normalized.trim.trim());\n  }\n  \n  // Normalize body style\n  if (normalized.bodyStyle) {\n    normalized.bodyStyle = titleCase(normalized.bodyStyle.trim());\n    // Common body style mappings\n    const bodyStyleMap: Record<string, string> = {\n      'sport utility': 'SUV',\n      'sports utility vehicle': 'SUV',\n      'pickup truck': 'Truck',\n      'pick-up': 'Truck',\n      'station wagon': 'Wagon',\n      'convertible': 'Convertible',\n      'coupe': 'Coupe',\n      'sedan': 'Sedan',\n      'hatchback': 'Hatchback',\n      'minivan': 'Minivan',\n      'van': 'Van'\n    };\n    \n    const normalized_lower = normalized.bodyStyle.toLowerCase();\n    for (const [key, value] of Object.entries(bodyStyleMap)) {\n      if (normalized_lower.includes(key)) {\n        normalized.bodyStyle = value;\n        break;\n      }\n    }\n  }\n  \n  // Normalize price - remove commas, ensure it's a number\n  if (normalized.price) {\n    if (typeof normalized.price === 'string') {\n      const priceStr = normalized.price.replace(/[$,\\s]/g, '');\n      const priceNum = parseInt(priceStr);\n      normalized.price = isNaN(priceNum) ? undefined : priceNum;\n    }\n  }\n  \n  // Normalize mileage - remove commas, ensure it's a number\n  if (normalized.mileage) {\n    if (typeof normalized.mileage === 'string') {\n      const mileageStr = normalized.mileage.replace(/[,\\s]/g, '');\n      const mileageNum = parseInt(mileageStr);\n      normalized.mileage = isNaN(mileageNum) ? undefined : mileageNum;\n    }\n  }\n  \n  // Normalize year\n  if (normalized.year) {\n    if (typeof normalized.year === 'string') {\n      const yearNum = parseInt(normalized.year);\n      normalized.year = isNaN(yearNum) ? undefined : yearNum;\n    }\n  }\n  \n  // Normalize colors\n  if (normalized.exteriorColor) {\n    normalized.exteriorColor = titleCase(normalized.exteriorColor.trim());\n  }\n  \n  if (normalized.interiorColor) {\n    normalized.interiorColor = titleCase(normalized.interiorColor.trim());\n  }\n  \n  // Normalize transmission\n  if (normalized.transmission) {\n    normalized.transmission = normalizeTransmission(normalized.transmission);\n  }\n  \n  // Normalize drivetrain\n  if (normalized.drivetrain) {\n    normalized.drivetrain = normalizeDrivetrain(normalized.drivetrain);\n  }\n  \n  // Normalize fuel type\n  if (normalized.fuelType) {\n    normalized.fuelType = normalizeFuelType(normalized.fuelType);\n  }\n  \n  // Normalize engine\n  if (normalized.engine) {\n    normalized.engine = normalizeEngine(normalized.engine);\n  }\n  \n  // Clean up VIN\n  if (normalized.vin) {\n    normalized.vin = normalized.vin.toUpperCase().replace(/[^A-HJ-NPR-Z0-9]/g, '');\n    if (normalized.vin.length !== 17) {\n      normalized.vin = undefined; // Invalid VIN\n    }\n  }\n  \n  // Clean up description\n  if (normalized.description) {\n    normalized.description = cleanDescription(normalized.description);\n  }\n  \n  // Set default condition if not specified\n  if (!normalized.condition) {\n    normalized.condition = 'Used';\n  }\n  \n  return normalized;\n}\n\n/**\n * Convert text to title case\n */\nfunction titleCase(text: string): string {\n  return text.toLowerCase().replace(/\\b\\w/g, char => char.toUpperCase());\n}\n\n/**\n * Normalize transmission values\n */\nfunction normalizeTransmission(transmission: string): string {\n  const cleaned = transmission.toLowerCase().trim();\n  \n  if (cleaned.includes('automatic') || cleaned.includes('auto')) {\n    return 'Automatic';\n  } else if (cleaned.includes('manual') || cleaned.includes('stick')) {\n    return 'Manual';\n  } else if (cleaned.includes('cvt')) {\n    return 'CVT';\n  } else {\n    return titleCase(transmission);\n  }\n}\n\n/**\n * Normalize drivetrain values\n */\nfunction normalizeDrivetrain(drivetrain: string): string {\n  const cleaned = drivetrain.toLowerCase().trim();\n  \n  if (cleaned.includes('front') || cleaned.includes('fwd')) {\n    return 'FWD';\n  } else if (cleaned.includes('rear') || cleaned.includes('rwd')) {\n    return 'RWD';\n  } else if (cleaned.includes('all') || cleaned.includes('awd')) {\n    return 'AWD';\n  } else if (cleaned.includes('4wd') || cleaned.includes('4x4')) {\n    return '4WD';\n  } else {\n    return titleCase(drivetrain);\n  }\n}\n\n/**\n * Normalize fuel type values\n */\nfunction normalizeFuelType(fuelType: string): string {\n  const cleaned = fuelType.toLowerCase().trim();\n  \n  if (cleaned.includes('gasoline') || cleaned.includes('gas') || cleaned.includes('petrol')) {\n    return 'Gasoline';\n  } else if (cleaned.includes('diesel')) {\n    return 'Diesel';\n  } else if (cleaned.includes('electric') || cleaned.includes('ev')) {\n    return 'Electric';\n  } else if (cleaned.includes('hybrid')) {\n    return 'Hybrid';\n  } else if (cleaned.includes('plug')) {\n    return 'Plug-in Hybrid';\n  } else {\n    return titleCase(fuelType);\n  }\n}\n\n/**\n * Normalize engine descriptions\n */\nfunction normalizeEngine(engine: string): string {\n  // Remove extra whitespace and normalize common terms\n  let normalized = engine.trim().replace(/\\s+/g, ' ');\n  \n  // Common replacements\n  normalized = normalized.replace(/\\bL\\b/g, 'Liter');\n  normalized = normalized.replace(/\\bcyl\\b/gi, 'Cylinder');\n  normalized = normalized.replace(/\\bturbo\\b/gi, 'Turbo');\n  normalized = normalized.replace(/\\bsupercharged\\b/gi, 'Supercharged');\n  \n  return normalized;\n}\n\n/**\n * Clean up description text\n */\nfunction cleanDescription(description: string): string {\n  // Remove extra whitespace\n  let cleaned = description.trim().replace(/\\s+/g, ' ');\n  \n  // Remove common dealer boilerplate\n  const boilerplatePatterns = [\n    /call \\d{3}[-.\\s]?\\d{3}[-.\\s]?\\d{4}/gi,\n    /visit us at .+/gi,\n    /financing available/gi,\n    /trade-ins welcome/gi,\n    /extended warranty/gi\n  ];\n  \n  boilerplatePatterns.forEach(pattern => {\n    cleaned = cleaned.replace(pattern, '');\n  });\n  \n  // Clean up punctuation\n  cleaned = cleaned.replace(/\\s+/g, ' ').trim();\n  \n  // Ensure it ends with proper punctuation\n  if (cleaned && !cleaned.match(/[.!?]$/)) {\n    cleaned += '.';\n  }\n  \n  return cleaned;\n}\n\n/**\n * Format price for display\n */\nexport function formatPrice(price: number): string {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0\n  }).format(price);\n}\n\n/**\n * Format mileage for display\n */\nexport function formatMileage(mileage: number): string {\n  return new Intl.NumberFormat('en-US').format(mileage) + ' miles';\n}\n\n/**\n * Generate a title for Facebook Marketplace\n */\nexport function generateFacebookTitle(vehicle: Vehicle): string {\n  const parts: string[] = [];\n  \n  if (vehicle.year) parts.push(vehicle.year.toString());\n  if (vehicle.make) parts.push(vehicle.make);\n  if (vehicle.model) parts.push(vehicle.model);\n  if (vehicle.trim) parts.push(vehicle.trim);\n  \n  return parts.join(' ');\n}\n\n/**\n * Generate a formatted description for Facebook Marketplace\n */\nexport function generateFacebookDescription(vehicle: Vehicle, dealer: any, stockNumber?: string): string {\n  const lines: string[] = [];\n  \n  // Vehicle details\n  const details: string[] = [];\n  if (vehicle.year) details.push(`Year: ${vehicle.year}`);\n  if (vehicle.make) details.push(`Make: ${vehicle.make}`);\n  if (vehicle.model) details.push(`Model: ${vehicle.model}`);\n  if (vehicle.trim) details.push(`Trim: ${vehicle.trim}`);\n  if (vehicle.mileage) details.push(`Mileage: ${formatMileage(vehicle.mileage)}`);\n  if (vehicle.exteriorColor) details.push(`Exterior: ${vehicle.exteriorColor}`);\n  if (vehicle.interiorColor) details.push(`Interior: ${vehicle.interiorColor}`);\n  if (vehicle.transmission) details.push(`Transmission: ${vehicle.transmission}`);\n  if (vehicle.drivetrain) details.push(`Drivetrain: ${vehicle.drivetrain}`);\n  if (vehicle.engine) details.push(`Engine: ${vehicle.engine}`);\n  if (vehicle.fuelType) details.push(`Fuel: ${vehicle.fuelType}`);\n  if (vehicle.vin) details.push(`VIN: ${vehicle.vin}`);\n  if (stockNumber) details.push(`Stock #: ${stockNumber}`);\n  \n  if (details.length > 0) {\n    lines.push('VEHICLE DETAILS:');\n    details.forEach(detail => lines.push(`• ${detail}`));\n    lines.push('');\n  }\n  \n  // Original description\n  if (vehicle.description) {\n    lines.push('DESCRIPTION:');\n    lines.push(vehicle.description);\n    lines.push('');\n  }\n  \n  // Dealer info\n  if (dealer.name) {\n    lines.push(`Offered by: ${dealer.name}`);\n    if (dealer.phone) {\n      lines.push(`Contact: ${dealer.phone}`);\n    }\n  }\n  \n  return lines.join('\\n');\n}\n","import { StorageData, ScrapeResult } from '../types';\nimport { Logger } from './logger';\n\nexport class StorageManager {\n  private logger = new Logger('Storage');\n\n  /**\n   * Get all stored data\n   */\n  async getData(): Promise<StorageData> {\n    try {\n      const result = await chrome.storage.local.get(null);\n      \n      const defaultData: StorageData = {\n        scrapeResults: [],\n        settings: {\n          autofillOptions: {\n            condition: 'Used',\n            uploadPhotos: true,\n            maxPhotos: 20\n          },\n          enabledSites: ['autotrader.com', 'cars.com', 'cargurus.com', 'dealer.com']\n        }\n      };\n\n      return {\n        scrapeResults: result.scrapeResults || defaultData.scrapeResults,\n        settings: {\n          ...defaultData.settings,\n          ...result.settings\n        }\n      };\n    } catch (error) {\n      this.logger.error('Failed to get data from storage:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Save scrape result\n   */\n  async saveScrapeResult(result: ScrapeResult): Promise<void> {\n    try {\n      const data = await this.getData();\n      \n      // Add to beginning of array and limit to 50\n      data.scrapeResults.unshift(result);\n      if (data.scrapeResults.length > 50) {\n        data.scrapeResults = data.scrapeResults.slice(0, 50);\n      }\n\n      await chrome.storage.local.set({ scrapeResults: data.scrapeResults });\n      this.logger.info('Saved scrape result:', result.id);\n    } catch (error) {\n      this.logger.error('Failed to save scrape result:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get all scrape results\n   */\n  async getScrapeResults(): Promise<ScrapeResult[]> {\n    try {\n      const data = await this.getData();\n      return data.scrapeResults;\n    } catch (error) {\n      this.logger.error('Failed to get scrape results:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Delete a scrape result\n   */\n  async deleteScrapeResult(id: string): Promise<void> {\n    try {\n      const data = await this.getData();\n      data.scrapeResults = data.scrapeResults.filter(result => result.id !== id);\n      \n      await chrome.storage.local.set({ scrapeResults: data.scrapeResults });\n      this.logger.info('Deleted scrape result:', id);\n    } catch (error) {\n      this.logger.error('Failed to delete scrape result:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Clear all scrape results\n   */\n  async clearScrapeResults(): Promise<void> {\n    try {\n      await chrome.storage.local.set({ scrapeResults: [] });\n      this.logger.info('Cleared all scrape results');\n    } catch (error) {\n      this.logger.error('Failed to clear scrape results:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Save settings\n   */\n  async saveSettings(settings: StorageData['settings']): Promise<void> {\n    try {\n      await chrome.storage.local.set({ settings });\n      this.logger.info('Saved settings');\n    } catch (error) {\n      this.logger.error('Failed to save settings:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get settings\n   */\n  async getSettings(): Promise<StorageData['settings']> {\n    try {\n      const data = await this.getData();\n      return data.settings;\n    } catch (error) {\n      this.logger.error('Failed to get settings:', error);\n      return {\n        autofillOptions: {\n          condition: 'Used',\n          uploadPhotos: true,\n          maxPhotos: 20\n        },\n        enabledSites: ['autotrader.com', 'cars.com', 'cargurus.com', 'dealer.com']\n      };\n    }\n  }\n\n  /**\n   * Export data as JSON\n   */\n  async exportData(): Promise<string> {\n    try {\n      const data = await this.getData();\n      return JSON.stringify(data, null, 2);\n    } catch (error) {\n      this.logger.error('Failed to export data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Import data from JSON\n   */\n  async importData(jsonData: string): Promise<void> {\n    try {\n      const data = JSON.parse(jsonData) as StorageData;\n      \n      // Validate structure\n      if (!data.scrapeResults || !Array.isArray(data.scrapeResults)) {\n        throw new Error('Invalid data format: scrapeResults must be an array');\n      }\n      \n      if (!data.settings) {\n        throw new Error('Invalid data format: settings is required');\n      }\n\n      await chrome.storage.local.set(data);\n      this.logger.info('Imported data successfully');\n    } catch (error) {\n      this.logger.error('Failed to import data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get storage usage statistics\n   */\n  async getStorageStats(): Promise<{ used: number; total: number; percentage: number }> {\n    try {\n      const usage = await chrome.storage.local.getBytesInUse();\n      const quota = chrome.storage.local.QUOTA_BYTES;\n      \n      return {\n        used: usage,\n        total: quota,\n        percentage: Math.round((usage / quota) * 100)\n      };\n    } catch (error) {\n      this.logger.error('Failed to get storage stats:', error);\n      return { used: 0, total: 0, percentage: 0 };\n    }\n  }\n}\n\n// Export singleton instance\nexport const storage = new StorageManager();\n","export class Logger {\n  private context: string;\n  private enabledLevels: Set<string>;\n\n  constructor(context: string) {\n    this.context = context;\n    \n    // Enable all levels in development, only errors in production\n    this.enabledLevels = new Set(['error', 'warn', 'info', 'debug']);\n  }\n\n  error(message: string, ...args: any[]): void {\n    if (this.enabledLevels.has('error')) {\n      console.error(`[${this.context}] ERROR:`, message, ...args);\n      \n      // Also send to background script for centralized logging\n      this.sendToBackground('error', message, args);\n    }\n  }\n\n  warn(message: string, ...args: any[]): void {\n    if (this.enabledLevels.has('warn')) {\n      console.warn(`[${this.context}] WARN:`, message, ...args);\n      this.sendToBackground('warn', message, args);\n    }\n  }\n\n  info(message: string, ...args: any[]): void {\n    if (this.enabledLevels.has('info')) {\n      console.info(`[${this.context}] INFO:`, message, ...args);\n      this.sendToBackground('info', message, args);\n    }\n  }\n\n  debug(message: string, ...args: any[]): void {\n    if (this.enabledLevels.has('debug')) {\n      console.debug(`[${this.context}] DEBUG:`, message, ...args);\n      // Don't send debug messages to background to reduce noise\n    }\n  }\n\n  /**\n   * Show user-visible toast notification\n   */\n  toast(message: string, type: 'success' | 'error' | 'warning' | 'info' = 'info'): void {\n    // Send message to background script to show notification\n    this.sendToBackground('toast', message, [type]);\n    \n    // Also log locally\n    switch (type) {\n      case 'error':\n        this.error(`Toast: ${message}`);\n        break;\n      case 'warning':\n        this.warn(`Toast: ${message}`);\n        break;\n      default:\n        this.info(`Toast: ${message}`);\n        break;\n    }\n  }\n\n  /**\n   * Send log message to background script\n   */\n  private sendToBackground(level: string, message: string, args: any[]): void {\n    try {\n      chrome.runtime.sendMessage({\n        type: 'LOG_MESSAGE',\n        data: {\n          level,\n          context: this.context,\n          message,\n          args,\n          timestamp: Date.now(),\n          url: window.location.href\n        }\n      }).catch(() => {\n        // Ignore errors if background script is not available\n      });\n    } catch (error) {\n      // Ignore errors in sending logs\n    }\n  }\n\n  /**\n   * Create performance timer\n   */\n  startTimer(label: string): () => void {\n    const startTime = performance.now();\n    this.debug(`Timer started: ${label}`);\n    \n    return () => {\n      const endTime = performance.now();\n      const duration = Math.round(endTime - startTime);\n      this.debug(`Timer finished: ${label} (${duration}ms)`);\n    };\n  }\n\n  /**\n   * Log with stack trace\n   */\n  trace(message: string, ...args: any[]): void {\n    if (this.enabledLevels.has('debug')) {\n      console.trace(`[${this.context}] TRACE:`, message, ...args);\n    }\n  }\n\n  /**\n   * Group related log messages\n   */\n  group(label: string): LogGroup {\n    return new LogGroup(this, label);\n  }\n}\n\nexport class LogGroup {\n  private logger: Logger;\n\n  constructor(logger: Logger, label: string, collapsed = false) {\n    this.logger = logger;\n    \n    if (collapsed) {\n      console.groupCollapsed(`[${logger['context']}] ${label}`);\n    } else {\n      console.group(`[${logger['context']}] ${label}`);\n    }\n  }\n\n  log(message: string, ...args: any[]): void {\n    console.log(message, ...args);\n  }\n\n  error(message: string, ...args: any[]): void {\n    this.logger.error(message, ...args);\n  }\n\n  warn(message: string, ...args: any[]): void {\n    this.logger.warn(message, ...args);\n  }\n\n  info(message: string, ...args: any[]): void {\n    this.logger.info(message, ...args);\n  }\n\n  debug(message: string, ...args: any[]): void {\n    this.logger.debug(message, ...args);\n  }\n\n  end(): void {\n    console.groupEnd();\n  }\n}\n\n/**\n * Global error handler for unhandled exceptions\n */\nexport function setupGlobalErrorHandling(): void {\n  const logger = new Logger('Global');\n\n  window.addEventListener('error', (event) => {\n    logger.error('Unhandled error:', {\n      message: event.message,\n      filename: event.filename,\n      lineno: event.lineno,\n      colno: event.colno,\n      error: event.error\n    });\n  });\n\n  window.addEventListener('unhandledrejection', (event) => {\n    logger.error('Unhandled promise rejection:', event.reason);\n  });\n}\n\n/**\n * Toast notification system for user-visible messages\n */\nexport class ToastManager {\n  private container: HTMLElement | null = null;\n  private logger = new Logger('Toast');\n\n  constructor() {\n    this.createContainer();\n  }\n\n  show(message: string, type: 'success' | 'error' | 'warning' | 'info' = 'info', duration = 5000): void {\n    if (!this.container) {\n      this.createContainer();\n    }\n\n    const toast = this.createToastElement(message, type);\n    this.container!.appendChild(toast);\n\n    // Animate in\n    requestAnimationFrame(() => {\n      toast.style.transform = 'translateX(0)';\n      toast.style.opacity = '1';\n    });\n\n    // Auto remove\n    setTimeout(() => {\n      this.removeToast(toast);\n    }, duration);\n\n    // Click to dismiss\n    toast.addEventListener('click', () => {\n      this.removeToast(toast);\n    });\n\n    this.logger.debug(`Showed toast: ${type} - ${message}`);\n  }\n\n  private createContainer(): void {\n    this.container = document.createElement('div');\n    this.container.id = 'vehicle-scraper-toasts';\n    this.container.style.cssText = `\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      z-index: 10000;\n      pointer-events: none;\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\n    `;\n    document.body.appendChild(this.container);\n  }\n\n  private createToastElement(message: string, type: string): HTMLElement {\n    const toast = document.createElement('div');\n    toast.style.cssText = `\n      background: ${this.getBackgroundColor(type)};\n      color: white;\n      padding: 12px 16px;\n      border-radius: 6px;\n      margin-bottom: 8px;\n      box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n      max-width: 300px;\n      word-wrap: break-word;\n      transform: translateX(100%);\n      opacity: 0;\n      transition: all 0.3s ease;\n      pointer-events: auto;\n      cursor: pointer;\n      font-size: 14px;\n      line-height: 1.4;\n    `;\n\n    const icon = this.getIcon(type);\n    toast.innerHTML = `\n      <div style=\"display: flex; align-items: center; gap: 8px;\">\n        <span style=\"font-size: 16px;\">${icon}</span>\n        <span>${message}</span>\n      </div>\n    `;\n\n    return toast;\n  }\n\n  private removeToast(toast: HTMLElement): void {\n    toast.style.transform = 'translateX(100%)';\n    toast.style.opacity = '0';\n    \n    setTimeout(() => {\n      if (toast.parentNode) {\n        toast.parentNode.removeChild(toast);\n      }\n    }, 300);\n  }\n\n  private getBackgroundColor(type: string): string {\n    switch (type) {\n      case 'success': return '#10B981';\n      case 'error': return '#EF4444';\n      case 'warning': return '#F59E0B';\n      case 'info': return '#3B82F6';\n      default: return '#6B7280';\n    }\n  }\n\n  private getIcon(type: string): string {\n    switch (type) {\n      case 'success': return '✅';\n      case 'error': return '❌';\n      case 'warning': return '⚠️';\n      case 'info': return 'ℹ️';\n      default: return '📢';\n    }\n  }\n}\n\n// Export singleton instance\nexport const toastManager = new ToastManager();\n"],"names":["normalizeVehicleData","vehicle","normalized","make","titleCase","trim","model","bodyStyle","bodyStyleMap","normalized_lower","toLowerCase","key","value","Object","entries","includes","price","priceStr","replace","priceNum","parseInt","isNaN","undefined","mileage","mileageStr","mileageNum","year","yearNum","exteriorColor","interiorColor","transmission","cleaned","normalizeTransmission","drivetrain","normalizeDrivetrain","fuelType","normalizeFuelType","engine","normalizeEngine","vin","toUpperCase","length","description","forEach","pattern","match","cleanDescription","condition","text","char","formatPrice","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","formatMileage","generateFacebookTitle","parts","push","toString","join","generateFacebookDescription","dealer","stockNumber","lines","details","detail","name","phone","storage","logger","getData","result","chrome","local","get","defaultData","scrapeResults","settings","autofillOptions","uploadPhotos","maxPhotos","enabledSites","error","this","saveScrapeResult","data","unshift","slice","set","info","id","getScrapeResults","deleteScrapeResult","filter","clearScrapeResults","saveSettings","getSettings","exportData","JSON","stringify","importData","jsonData","parse","Array","isArray","Error","getStorageStats","usage","getBytesInUse","quota","QUOTA_BYTES","used","total","percentage","Math","round","Logger","constructor","context","enabledLevels","Set","message","args","has","console","sendToBackground","warn","debug","toast","type","level","runtime","sendMessage","timestamp","Date","now","url","window","location","href","catch","startTimer","label","startTime","performance","endTime","duration","trace","group","LogGroup","collapsed","groupCollapsed","log","end","groupEnd","toastManager","container","createContainer","show","createToastElement","appendChild","requestAnimationFrame","transform","opacity","setTimeout","removeToast","addEventListener","document","createElement","cssText","body","getBackgroundColor","icon","getIcon","innerHTML","parentNode","removeChild"],"sourceRoot":""}